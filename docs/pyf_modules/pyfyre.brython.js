__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1643697878058, "pyfyre.pyfyre": [".py", "from browser import document\nfrom pyfyre.globals import Globals\n\ndef runApp(app,mount=\"app-mount\"):\n body=document.getElementById(mount)\n body.innerHTML=\"\"\n body.appendChild(app.build().dom())\n \n Globals.__PARENT__=app\n", ["browser", "pyfyre.globals"]], "pyfyre": [".py", "", [], 1], "pyfyre.ajax": [".py", "from browser import ajax\n\n\nclass Ajax:\n def get(url,then):\n  req=ajax.ajax()\n  req.open('GET',url,True )\n  req.bind('complete',then)\n  req.set_header('content-type','application/x-www-form-urlencoded')\n  req.send()\n", ["browser"], 1], "pyfyre.globals.events": [".py", "from pyfyre.globals import Globals\n\nclass Events:\n ''\n\n\n\n \n \n @staticmethod\n def add(event):\n  Globals.__EVENTS__[event]=[]\n  \n @staticmethod\n def addListener(event,listener):\n  Globals.__EVENTS__[event].append(listener)\n  \n @staticmethod\n def broadcast(event):\n  for func in Globals.__EVENTS__[event]:\n   func()\n", ["pyfyre.globals"]], "pyfyre.globals": [".py", "\nclass Globals:\n __PARENT__=None\n __LOC__=None\n __EVENTS__={}\n \n PATH_INITIALIZED=False\n", [], 1], "pyfyre.management": [".py", "#!/usr/bin/env python3\n\nimport os,sys,random,string\nfrom shutil import copytree,rmtree,move\nfrom distutils.dir_util import copy_tree\n\nPYFYRE_HELP=\"\"\"\nManage your PyFyre projects.\n\nCommon Commands:\n\n    pyfyre.py create-app [name] [description]\n        Create a new PyFyre project in your current directory.\n\n    pyfyre.py runserver [port=8080]\n        Run a live server in your current directory.\n\n    pyfyre.py help\n        Show this message.\n\"\"\"\n\ndef pyfyre_help():\n print(PYFYRE_HELP)\n \ndef create_app(app_name:str,app_description:str):\n ''\n \n print(\"Creating your PyFyre project...\")\n \n path=os.path.join(os.getcwd(),app_name)\n \n try :\n  os.makedirs(path)\n except FileExistsError:\n  print(\"Project already exists. Aborted.\")\n  return\n  \n  \n core_dir=os.path.abspath(os.path.join(os.path.dirname(__file__),\"..\"))\n copy_tree(core_dir,os.path.join(path,\"pyfyre\"))\n \n \n user_dir=os.path.abspath(os.path.join(os.path.dirname(__file__),\"..\",\"user\"))\n copy_tree(user_dir,path)\n \n \n with open(os.path.join(user_dir,\"index.html\"))as file:\n  content=file.read().format(app_name=app_name,app_description=app_description,pyfyre_key=\"{pyfyre_key}\",src_key=\"{src_key}\")\n with open(os.path.join(user_dir,\"index.html\"),\"w\")as file:\n  file.write(content)\n  \n  \n with open(os.path.join(user_dir,\"README.md\"))as file:\n  content=file.read().format(app_name=app_name,app_description=app_description)\n with open(os.path.join(path,\"README.md\"),\"w\")as file:\n  file.write(content)\n  \n  \n with open(os.path.join(user_dir,\"settings.yaml\"))as file:\n  content=file.read().format(app_name=app_name,app_description=app_description)\n with open(os.path.join(path,\"settings.yaml\"),\"w\")as file:\n  file.write(content)\n  \n os.chdir(os.path.join(path,\"pyfyre\"))\n os.system(\"brython-cli --make_package pyfyre\")\n \n with open(os.path.join(\"pyfyre.brython.js\"))as file:\n  content=file.read()\n  \n os.chdir(os.path.join(\"..\"))\n os.mkdir(\"pyf_modules\")\n rmtree(\"pyfyre\")\n \n with open(os.path.join(\"pyf_modules\",\"pyfyre.brython.js\"),\"w\")as file:\n  file.write(content)\n  \n os.system(\"cls\"if os.name ==\"nt\"else \"clear\")\n \n print(\"Project created successfully.\")\n \ndef produce(directory_path,build_path,reload=False ):\n\n\n\n if not reload:\n  copytree(directory_path,build_path)\n  \n  with open(os.path.join(directory_path,\"pyf_modules\",\"pyfyre.brython.js\"))as file:\n   content=file.read()\n  with open(os.path.join(build_path,\"pyfyre.brython.js\"),\"w\")as file:\n   file.write(content)\n   \n   \n  css_path=os.path.join(directory_path,\"src\",\"css\")\n  src_css_path=os.path.join(build_path,\"css\")\n  os.mkdir(os.path.join(build_path,\"__temp__\"))\n  \n  copytree(css_path,src_css_path)\n  \n  \n os.chdir(os.path.join(directory_path,\"src\"))\n os.system(\"brython-cli --make_package src\")\n \n \n with open(os.path.join(\"src.brython.js\"))as file:\n  content=file.read()\n with open(os.path.join(build_path,\"src.brython.js\"),\"w\")as file:\n  file.write(content)\n with open(os.path.join(build_path,\"__temp__\",\"src.brython.js\"),\"w\")as file:\n  file.write(content)\n with open(os.path.join(directory_path,\"src\",\"__init__.py\"))as file:\n  content=file.read()\n with open(os.path.join(build_path,\"__init__.py\"),\"w\")as file:\n  file.flush()\n  file.write(content)\n  \n os.remove(\"src.brython.js\")\n \n os.chdir(build_path)\n \n \n if reload:\n  os.remove(\"src.brython.js\")\n  \n  _temp=set([\"__temp__\",\"__serve__\"])\n  \n  \n  for _,dirs,filenames in os.walk(build_path):\n   [dirs.remove(tmp)for tmp in list(dirs)if tmp in _temp]\n   \n   for filename in filenames:\n    _,ext=os.path.splitext(filename)\n    \n    if ext ==\".js\":\n     with open(filename)as file:\n      content=file.readlines()\n      \n      if str(content[0])==\"/* __SRC_FILES__ */\\n\":\n      \n       with open(os.path.join(build_path,\"__temp__\",\"src.brython.js\"))as file:\n        content=file.readlines()\n       content.insert(0,\"/* __SRC_FILES__ */\\n\")\n       with open(filename,\"w\")as file:\n        content=\"\".join(content)\n        file.write(content)\n        \n       break\n       \n       \n  css_path=os.path.join(directory_path,\"src\",\"css\")\n  src_css_path=os.path.join(build_path,\"css\")\n  \n  rmtree(src_css_path)\n  \n  src_css_path=os.path.join(build_path,\"css\")\n  \n  copytree(css_path,src_css_path)\n  \n if not reload:\n \n  pyfyre_key=''.join(random.choice(string.ascii_lowercase)for i in range(15))\n  src_key=''.join(random.choice(string.ascii_lowercase)for i in range(15))\n  os.rename(\"pyfyre.brython.js\",\"%s.js\"%pyfyre_key)\n  os.rename(\"src.brython.js\",\"%s.js\"%src_key)\n  \n  \n  with open(f\"{pyfyre_key}.js\")as file:content=file.readlines()\n  content.insert(0,\"/* __PYF_MODULES__ */\\n\")\n  with open(f\"{pyfyre_key}.js\",\"w\")as file:\n   content=\"\".join(content)\n   file.write(content)\n   \n   \n  with open(f\"{src_key}.js\")as file:content=file.readlines()\n  content.insert(0,\"/* __SRC_FILES__ */\\n\")\n  with open(f\"{src_key}.js\",\"w\")as file:\n   content=\"\".join(content)\n   file.write(content)\n   \n   \n  with open(os.path.join(build_path,\"index.html\"))as file:\n   content=file.read().format(pyfyre_key=pyfyre_key,src_key=src_key)\n  with open(os.path.join(build_path,\"index.html\"),\"w\")as file:\n   file.write(content)\n   \n   \n if not reload:\n  os.remove(\"README.md\")\n  os.remove(\"settings.yaml\")\n  rmtree(\"src\")\n  rmtree(\"pyf_modules\")\n  rmtree(\"__pycache__\")\n  \ndef run_app(directory,port:int=5500):\n print(\"Running your app in a development server...\")\n \n try :\n  from livereload import Server\n except ImportError:\n  raise ImportError(\"Cannot find the liveserver module. Is it installed?\")\n  \n server=Server()\n \n _directory=os.path.abspath(directory)if directory else os.getcwd()\n \n def checkServes():\n  if os.path.exists(os.path.join(_directory,\"__serve__\")):\n   rmtree(os.path.join(_directory,\"__serve__\"))\n   \n def reload():\n  print(\"Detected file changes, performing hot reload...\")\n  \n  produce(_directory,_build,reload=True )\n  \n  print(\"Hot reload successful!\")\n  \n checkServes()\n \n _build=os.path.join(_directory,\"__serve__\")\n \n produce(_directory,_build)\n \n os.system(\"cls\"if os.name ==\"nt\"else \"clear\")\n print(\"Happy Hacking!\")\n \n server.watch(f\"{_directory}/src/\",reload)\n server.serve(port=8000,host=\"localhost\",root=os.path.join(_directory,\"__serve__\"))\n \ndef build_app(directory):\n print(\"Producing optimized build for your project...\")\n \n directory_path=os.path.abspath(directory)if directory else os.getcwd()\n build_path=os.path.join(directory_path,\"build\")\n \n print(directory_path)\n \n produce(directory_path,build_path)\n \n print(\"Build succeeded!\")\n \ndef execute_from_command_line(argv=None ):\n ''\n try :\n  if sys.argv[1]==\"create-app\":\n   try :\n    name=sys.argv[2]\n   except IndexError:\n    name=\"MyApp\"\n    \n   try :\n    description=sys.argv[3]\n   except IndexError:\n    description=\"PyFyre web application.\"\n    \n   create_app(name,description)\n  elif sys.argv[1]==\"runapp\":\n   try :\n    directory=sys.argv[2]\n   except IndexError:\n    directory=None\n    \n   try :\n    port=sys.argv[3]\n   except IndexError:\n    port=None\n    \n   run_app(directory,port)\n  elif sys.argv[1]==\"build\":\n   try :\n    directory=sys.argv[2]\n   except IndexError:\n    directory=None\n    \n   build_app(directory)\n  elif sys.argv[1]==\"help\":\n   pyfyre_help()\n  else :\n   pyfyre_help()\n except IndexError:\n  pyfyre_help()\n  \nif __name__ ==\"__main__\":\n execute_from_command_line()\n", ["distutils.dir_util", "livereload", "os", "random", "shutil", "string", "sys"], 1], "pyfyre.router": [".py", "from pyfyre.globals import Globals\nfrom pyfyre.globals.events import Events\nfrom pyfyre.pyfyre import runApp\n\nfrom browser import document,window,bind\n\nclass Router:\n ''\n\n\n\n \n \n def __init__(self,routes):\n  self.routes=routes\n  \n  if not Globals.PATH_INITIALIZED:\n   Globals.__LOC__=window.location.pathname\n   Globals.PATH_INITIALIZED=True\n   \n  if not \"change_route\"in Globals.__EVENTS__:\n   Events.add(\"change_route\")\n   \n   self.listenRoute()\n   \n def dom(self):\n  return self.routes[Globals.__LOC__].dom()\n  \n def listenRoute(self):\n  def changeRoute():\n   runApp(Globals.__PARENT__)\n   \n  Events.addListener(\"change_route\",changeRoute)\n  \n @staticmethod\n def push(location):\n  Globals.__LOC__=location\n  \n  Events.broadcast(\"change_route\")\n  window.history.pushState(None ,None ,location)\n  \n  @bind(window,'popstate')\n  def popState(e):\n   Globals.__LOC__=window.location.pathname\n   Events.broadcast(\"change_route\")\n   e.preventDefault()\n", ["browser", "pyfyre.globals", "pyfyre.globals.events", "pyfyre.pyfyre"], 1], "pyfyre.user": [".py", "", [], 1], "pyfyre.user.src.main": [".py", "from pyfyre.widgets import *\n\n\n\nclass MyWebpage(Container):\n def __init__(self):\n  super().__init__(\n  className=\"container\",\n  children=[\n  Text(\n  className=\"title\",\n  textContent=\"Welcome to PyFyre!\"\n  ),\n  Text(\n  className=\"desc\",\n  textContent=\"Try to experiment, edit the `src/main.py` and wait for it to reload automatically on a liveserver.\"\n  )\n  ]\n  )\n", ["pyfyre.widgets"]], "pyfyre.user.src": [".py", "from pyfyre.widgets import *\nfrom pyfyre.pyfyre import runApp\nfrom src.main import MyWebpage\nfrom src.components.header import Header\n\n\n\n\n\nclass App(UsesState):\n def __init__(self):\n \n \n  self.greet=\"Hello, there\"\n  \n def build(self):\n \n \n \n \n  return Container(\n  className=\"root\",\n  children=[\n  Header(self.greet),\n  MyWebpage()\n  ]\n  )\n  \n  \n  \n  \n  \n  \n  \n  \nrunApp(\nApp(),\nmount=\"app-mount\"\n)\n", ["pyfyre.pyfyre", "pyfyre.widgets", "src.components.header", "src.main"], 1], "pyfyre.user.src.components.header": [".py", "from pyfyre.widgets import *\n\nclass Header(Container):\n def __init__(self,greet):\n  super().__init__(\n  className=\"test\",\n  children=[\n  Text(\n  className=\"text\",\n  textContent=f\"{greet}, I'm a header component!\"\n  )\n  ]\n  )\n", ["pyfyre.widgets"]], "pyfyre.user.src.components": [".py", "", [], 1], "pyfyre.user.src.css": [".py", "", [], 1], "pyfyre.widgets": [".py", "\nfrom pyfyre.pyfyre import runApp\nfrom pyfyre.globals import Globals\n\n\nfrom browser import document,window\nfrom pyfyre.router import Router\n\nclass UsesState:\n\n def build(self):\n  pass\n  \n def update(self):\n  runApp(self)\n  \nclass Widget:\n\n def __init__(self,tagname:str,*,className,props=None ):\n  self.tagname=tagname\n  self.className=className\n  self.props=props if props is not None else {}\n  \n def dom(self):\n  element=document.createElement(self.tagname)\n  element.className=self.className\n  \n  for key,value in self.props.items():\n   element.attrs[key]=value\n   \n  return element\n  \nclass Container(Widget):\n\n def __init__(self,*,children,onClick=None ,className,props=None ):\n  super().__init__(\"div\",className=className,props=props)\n  self.children=children\n  self.onClick=onClick\n  \n def dom(self):\n  element=super().dom()\n  \n  if self.onClick is not None :\n   element.bind(\"click\",self.onClick)\n   \n  for child in self.children:\n   element.appendChild(child.dom())\n   \n  return element\n  \nclass Button(Widget):\n\n def __init__(self,*,textContent:str=\"Button\",onClick=None ,className,props):\n  super().__init__(\"button\",className=className,props=props)\n  self.textContent=textContent\n  self.onClick=onClick\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  \n  if self.onClick is not None :\n   element.bind(\"click\",self.onClick)\n   \n  return element\n  \nclass Anchor(Widget):\n\n def __init__(self,*,textContent:str=\"Anchor\",onClick=None ,link:str=\"#\",className,props=None ):\n  super().__init__(\"a\",className=className,props=props)\n  self.textContent=textContent\n  self.onClick=onClick\n  self.link=link\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  element.href=self.link\n  \n  if self.onClick is not None :\n   element.bind(\"click\",self.onClick)\n   \n  return element\n  \nclass Text(Widget):\n\n def __init__(self,*,textContent:str=\"Anchor\",onClick=None ,className,props=None ):\n  super().__init__(\"p\",className=className,props=props)\n  self.textContent=textContent\n  self.onClick=onClick\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  \n  if self.onClick is not None :\n   element.bind(\"click\",self.onClick)\n   \n  return element\n  \n  \nclass Image(Widget):\n\n def __init__(self,*,src,onClick=None ,className,props=None ):\n  super().__init__(\"img\",className=className,props=props)\n  self.src=src\n  self.onClick=onClick\n  \n def dom(self):\n  element=super().dom()\n  element.src=self.src\n  \n  if self.onClick is not None :\n   element.bind(\"click\",self.onClick)\n   \n  return element\n  \nclass Link(Widget):\n\n def __init__(self,*,textContent:str=\"Anchor\",to='/',className,props=None ):\n  super().__init__(\"a\",className=className,props=props)\n  self.textContent=textContent\n  self.to=to\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  element.href=\"#\"\n  \n  element.bind(\"click\",self.navigate)\n  \n  return element\n  \n def navigate(self,e):\n  e.preventDefault()\n  Router.push(self.to)\n  \nclass ListBuilder(Widget):\n\n def __init__(self,*,count,builder,onClick=None ,className,props=None ):\n  super().__init__(\"div\",className=className,props=props)\n  self.count=count\n  self.builder=builder\n  self.onClick=onClick\n  \n def dom(self):\n  element=super().dom()\n  \n  if self.onClick is not None :\n   element.bind(\"click\",self.onClick)\n   \n  for i in range(self.count):\n   element.appendChild(self.builder(i).dom())\n   \n  return element\n", ["browser", "pyfyre.globals", "pyfyre.pyfyre", "pyfyre.router"], 1]}
__BRYTHON__.update_VFS(scripts)
