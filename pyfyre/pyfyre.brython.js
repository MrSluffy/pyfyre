__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1644028510245, "pyfyre.pyfyre": [".py", "from browser import document\nfrom pyfyre.globals import Globals\n\ndef runApp(app,mount=\"app-mount\"):\n body=document.getElementById(mount)\n body.innerHTML=\"\"\n body.appendChild(app.dom())\n \n Globals.__PARENT__=app\n", ["browser", "pyfyre.globals"]], "pyfyre": [".py", "", [], 1], "pyfyre.ajax": [".py", "from browser import ajax\n\nclass Ajax:\n ''\n\n \n \n def get(url,mode=\"json\",then=None ):\n  req=ajax.get(url,mode=mode,oncomplete=then)\n", ["browser"], 1], "pyfyre.core.exceptions": [".py", "from pyfyre.widgets.widget import Widget\n\nclass BaseException:\n def __init__(self,e):\n  self.e=e\n  \n def printScreen(self):\n  return self.TextException(self.e).dom()\n  \n class TextException(Widget):\n  def __init__(self,error:str,className=\"\",props:dict=None ):\n   super().__init__(\"h1\",className=className,props=props)\n   self.error=error\n   \n  def dom(self):\n   element=super().dom()\n   element.textContent=self.error\n   \n   element.attrs[\"style\"]=\"background-color: #efa3a3; width: fit-content; padding: 10px;\"\n   \n   return element\n   \nclass RenderError(BaseException):\n pass\n", ["pyfyre.widgets.widget"]], "pyfyre.core": [".py", "", [], 1], "pyfyre.globals.events": [".py", "from pyfyre.globals import Globals\n\nclass Events:\n ''\n\n\n\n \n \n @staticmethod\n def add(event):\n  Globals.__EVENTS__[event]=[]\n  \n @staticmethod\n def addListener(event,listener):\n  Globals.__EVENTS__[event].append(listener)\n  \n @staticmethod\n def broadcast(event):\n  for func in Globals.__EVENTS__[event]:\n   func()\n", ["pyfyre.globals"]], "pyfyre.globals": [".py", "\nclass Globals:\n\n\n\n __PARENT__=None\n \n \n \n __LOC__=None\n \n \n PATH_INITIALIZED=False\n \n \n \n __EVENTS__={}\n \n \n \n __ASSETS__=\"\"\n", [], 1], "pyfyre.management": [".py", "#!/usr/bin/env python3\n\nimport os,sys,random,string\nfrom shutil import copytree,rmtree,move\nfrom distutils.dir_util import copy_tree\n\nPYFYRE_HELP=\"\"\"\nManage your PyFyre projects.\n\nCommon Commands:\n\n    pyfyre.py create-app [name] [description]\n        Create a new PyFyre project in your current directory.\n\n    pyfyre.py runserver [port=8080]\n        Run a live server in your current directory.\n\n    pyfyre.py help\n        Show this message.\n\"\"\"\n\ndef pyfyre_help():\n print(PYFYRE_HELP)\n \ndef create_app(app_name:str,app_description:str):\n ''\n \n print(\"Creating your PyFyre project...\")\n \n path=os.path.join(os.getcwd(),app_name)\n \n try :\n  os.makedirs(path)\n except FileExistsError:\n  print(\"Project already exists. Aborted.\")\n  return\n  \n  \n core_dir=os.path.abspath(os.path.join(os.path.dirname(__file__),\"..\"))\n copy_tree(core_dir,os.path.join(path,\"pyfyre\"))\n \n \n user_dir=os.path.abspath(os.path.join(os.path.dirname(__file__),\"..\",\"user\"))\n copy_tree(user_dir,path)\n \n \n with open(os.path.join(user_dir,\"index.html\"))as file:\n  content=file.read().format(app_name=app_name,app_description=app_description,modules_key=\"{modules_key}\",builtins_key=\"{builtins_key}\",pyfyre_key=\"{pyfyre_key}\")\n with open(os.path.join(user_dir,\"index.html\"),\"w\")as file:\n  file.write(content)\n  \n  \n with open(os.path.join(user_dir,\"README.md\"))as file:\n  content=file.read().format(app_name=app_name,app_description=app_description)\n with open(os.path.join(path,\"README.md\"),\"w\")as file:\n  file.write(content)\n  \n  \n with open(os.path.join(user_dir,\"settings.yaml\"))as file:\n  content=file.read().format(app_name=app_name,app_description=app_description)\n with open(os.path.join(path,\"settings.yaml\"),\"w\")as file:\n  file.write(content)\n  \n os.chdir(os.path.join(path,\"pyfyre\"))\n \n os.system(\"brython-cli --install\")\n \n \n os.remove(\"demo.html\")\n os.remove(\"unicode.txt\")\n os.remove(\"README.txt\")\n os.remove(\"brython.js\")\n os.remove(\"index.html\")\n \n rmtree(os.path.join(path,\"pyfyre\",\"management\"))\n rmtree(os.path.join(path,\"pyfyre\",\"user\"))\n \n os.system(\"brython-cli --modules\")\n os.system(\"brython-cli --make_package pyfyre\")\n \n os.chdir(os.path.join(\"..\"))\n os.mkdir(\"pyf_modules\")\n \n with open(os.path.join(path,\"pyfyre\",\"brython_modules.js\"))as file:\n  content=file.read()\n with open(os.path.join(\"pyf_modules\",\"builtins.js\"),\"w\")as file:\n  file.write(content)\n with open(os.path.join(path,\"pyfyre\",\"pyfyre.brython.js\"))as file:\n  content=file.read()\n with open(os.path.join(\"pyf_modules\",\"modules.js\"),\"w\")as file:\n  file.write(content)\n  \n rmtree(\"pyfyre\")\n os.system(\"cls\"if os.name ==\"nt\"else \"clear\")\n \n print(\"Project created successfully.\")\n \ndef produce(directory_path,build_path,reload=False ):\n\n\n\n if not reload:\n  copytree(directory_path,build_path)\n  \n  for _,__,filenames in os.walk(os.path.join(build_path,\"pyf_modules\")):\n   for filename in filenames:\n   \n    _,ext=os.path.splitext(filename)\n    \n    if ext ==\".js\":\n     with open(os.path.join(directory_path,\"pyf_modules\",filename))as file:\n      content=file.read()\n     with open(os.path.join(build_path,filename),\"w\")as file:\n      file.write(content)\n      \n      \n  css_path=os.path.join(directory_path,\"src\",\"css\")\n  src_css_path=os.path.join(build_path,\"css\")\n  os.mkdir(os.path.join(build_path,\"__temp__\"))\n  \n  copytree(css_path,src_css_path)\n  \n with open(os.path.join(build_path,\"index.html\"))as file:\n  index_content=file.read()\n  \n  \n os.chdir(build_path)\n os.system(\"brython-cli --install\")\n \n \n os.remove(os.path.join(build_path,\"demo.html\"))\n os.remove(os.path.join(build_path,\"unicode.txt\"))\n os.remove(os.path.join(build_path,\"README.txt\"))\n os.remove(os.path.join(build_path,\"brython.js\"))\n \n \n if reload:os.chdir(directory_path)\n \n os.system(\"brython-cli --modules\")\n \n \n with open(os.path.join(build_path,\"index.html\"),\"w\")as file:\n  file.write(index_content)\n with open(os.path.join(directory_path,\"src\",\"__init__.py\"))as file:\n  content=file.read()\n with open(os.path.join(build_path,\"__init__.py\"),\"w\")as file:\n  file.flush()\n  file.write(content)\n  \n os.chdir(build_path)\n \n \n if reload:\n \n  _ignores=set([\"__temp__\",\"__serve__\",\"__dev__\"])\n  \n  \n  for _,dirs,filenames in os.walk(build_path):\n   [dirs.remove(tmp)for tmp in list(dirs)if tmp in _ignores]\n   \n   for filename in filenames:\n    name,ext=os.path.splitext(filename)\n    \n    if ext ==\".js\":\n     if \"main\"in name:\n      with open(os.path.join(build_path,\"brython_modules.js\"))as file:\n       content=file.read()\n      with open(filename,\"w\")as file:\n       file.write(content)\n       \n       \n  css_path=os.path.join(directory_path,\"src\",\"css\")\n  src_css_path=os.path.join(build_path,\"css\")\n  \n  rmtree(src_css_path)\n  \n  src_css_path=os.path.join(build_path,\"css\")\n  \n  copytree(css_path,src_css_path)\n  \n if not reload:\n \n  modules_key=''.join(random.choice(string.ascii_lowercase)for i in range(15))\n  builtins_key=''.join(random.choice(string.ascii_lowercase)for i in range(15))\n  pyfyre_key=''.join(random.choice(string.ascii_lowercase)for i in range(15))\n  \n  os.rename(\"brython_modules.js\",\"main.%s.js\"%modules_key)\n  os.rename(\"modules.js\",\"std.%s.js\"%builtins_key)\n  os.rename(\"builtins.js\",\"pyf.%s.js\"%pyfyre_key)\n  \n  \n  with open(os.path.join(build_path,\"index.html\"))as file:\n   content=file.read().format(modules_key=modules_key,pyfyre_key=pyfyre_key,builtins_key=builtins_key)\n  with open(os.path.join(build_path,\"index.html\"),\"w\")as file:\n   file.write(content)\n   \n   \n if not reload:\n  try :\n   os.remove(\"requirements.txt\")\n   os.remove(\"runtime.txt\")\n   \n   rmtree(\"__serve__\")\n   rmtree(\"__temp__\")\n   rmtree(\"__pycache__\")\n  except Exception:pass\n  \n  rmtree(\"pyf_modules\")\n  os.remove(\"README.md\")\n  os.remove(\"settings.yaml\")\n  os.remove(\"brython_stdlib.js\")\n  \n  rmtree(\"src\")\n elif reload:\n  os.remove(\"brython_stdlib.js\")\n  os.remove(\"brython_modules.js\")\n  \ndef run_app(directory,port):\n print(\"Running your app in a development server...\")\n \n try :\n  from livereload import Server\n except ImportError:\n  raise ImportError(\"Cannot find the liveserver module. Is it installed?\")\n  \n server=Server()\n \n _directory=os.path.abspath(directory)if directory else os.getcwd()\n \n def checkServes():\n  if os.path.exists(os.path.join(_directory,\"__serve__\")):\n   rmtree(os.path.join(_directory,\"__serve__\"))\n   \n def reload():\n  print(\"Detected file changes, performing hot reload...\")\n  \n  produce(_directory,_build,reload=True )\n  \n  print(\"Hot reload successful!\")\n  \n checkServes()\n \n _build=os.path.join(_directory,\"__serve__\")\n \n produce(_directory,_build)\n \n os.system(\"cls\"if os.name ==\"nt\"else \"clear\")\n print(\"Happy Hacking!\")\n \n server.watch(f\"{_directory}/src/\",reload)\n server.serve(port=port if port else 8000,host=\"localhost\",root=os.path.join(_directory,\"__serve__\"))\n \ndef build_app(directory):\n print(\"Producing optimized build for your project...\")\n \n directory_path=os.path.abspath(directory)if directory else os.getcwd()\n build_path=os.path.join(directory_path,\"build\")\n \n print(directory_path)\n \n produce(directory_path,build_path)\n \n print(\"Build succeeded!\")\n \ndef execute_from_command_line(argv=None ):\n ''\n try :\n  if sys.argv[1]==\"create-app\":\n   try :\n    name=sys.argv[2]\n   except IndexError:\n    name=\"MyApp\"\n    \n   try :\n    description=sys.argv[3]\n   except IndexError:\n    description=\"PyFyre web application.\"\n    \n   create_app(name,description)\n  elif sys.argv[1]==\"runapp\":\n   try :\n    directory=sys.argv[2]\n   except IndexError:\n    directory=None\n    \n   try :\n    port=sys.argv[3]\n   except IndexError:\n    port=None\n    \n   run_app(directory,port)\n  elif sys.argv[1]==\"build\":\n   try :\n    directory=sys.argv[2]\n   except IndexError:\n    directory=None\n    \n   build_app(directory)\n  elif sys.argv[1]==\"help\":\n   pyfyre_help()\n  else :\n   pyfyre_help()\n except IndexError:\n  pyfyre_help()\n  \nif __name__ ==\"__main__\":\n execute_from_command_line()\n", ["distutils.dir_util", "livereload", "os", "random", "shutil", "string", "sys"], 1], "pyfyre.router": [".py", "from pyfyre.globals import Globals\nfrom pyfyre.globals.events import Events\nfrom pyfyre.pyfyre import runApp\n\nfrom browser import document,window,bind\n\nclass Router:\n ''\n\n\n\n \n \n def __init__(self,routes):\n  self.routes=routes\n  \n  if not Globals.PATH_INITIALIZED:\n   Globals.__LOC__=window.location.pathname\n   Globals.PATH_INITIALIZED=True\n   \n  if not \"change_route\"in Globals.__EVENTS__:\n   Events.add(\"change_route\")\n   \n   self.listenRoute()\n   \n def dom(self):\n  return self.routes[Globals.__LOC__].dom()\n  \n def listenRoute(self):\n  def changeRoute():\n   runApp(Globals.__PARENT__)\n   \n  Events.addListener(\"change_route\",changeRoute)\n  \n @staticmethod\n def push(location):\n  Globals.__LOC__=location\n  \n  Events.broadcast(\"change_route\")\n  window.history.pushState(None ,None ,location)\n  \n  @bind(window,'popstate')\n  def popState(e):\n   Globals.__LOC__=window.location.pathname\n   Events.broadcast(\"change_route\")\n   e.preventDefault()\n", ["browser", "pyfyre.globals", "pyfyre.globals.events", "pyfyre.pyfyre"], 1], "pyfyre.user": [".py", "", [], 1], "pyfyre.user.src.main": [".py", "from src.components.counterapp import CounterApp\nfrom pyfyre.widgets import *\nfrom src.components.experiment import Experiment\n\n\n\nclass MyWebpage(UsesState):\n def __init__(self,greet):\n  self.greet=greet\n  \n def build(self):\n  return Container(\n  className=\"container\",\n  children=[\n  Text(\n  f\"{self.greet} to PyFyre!\",\n  className=\"title\"\n  ),\n  Experiment(),\n  CounterApp()\n  ]\n  )\n", ["pyfyre.widgets", "src.components.counterapp", "src.components.experiment"]], "pyfyre.user.src": [".py", "from pyfyre.widgets import *\nfrom pyfyre.pyfyre import runApp\nfrom src.main import MyWebpage\n\n\n\n\n\nclass App(UsesState):\n def __init__(self):\n \n \n  self.greet=\"Welcome\"\n  \n def build(self):\n \n \n \n \n  return MyWebpage(self.greet)\n  \n  \n  \n  \n  \n  \n  \n  \nrunApp(\nApp(),\nmount=\"app-mount\"\n)\n", ["pyfyre.pyfyre", "pyfyre.widgets", "src.main"], 1], "pyfyre.user.src.components.counterapp": [".py", "from pyfyre.widgets import *\n\nclass CounterApp(UsesState):\n def __init__(self):\n  self.count=0\n  \n def increment(self,e):\n  self.count=self.count+1\n  self.update()\n  \n def decrement(self,e):\n  self.count=self.count -1\n  self.update()\n  \n def build(self):\n  return Container(\n  className=\"counter-app\",\n  children=[\n  Text(\"Counter app example:\"),\n  Container(\n  className=\"counters\",\n  children=[\n  Button(\n  \"-\",\n  onClick=self.decrement,\n  className=\"btn-counter\"\n  ),\n  Text(self.count),\n  Button(\n  \"+\",\n  onClick=self.increment,\n  className=\"btn-counter\"\n  )\n  ]\n  )\n  ]\n  )\n", ["pyfyre.widgets"]], "pyfyre.user.src.components.experiment": [".py", "from pyfyre.widgets import *\n\nclass Experiment(Container):\n def __init__(self):\n  super().__init__(\n  className=\"test\",\n  children=[\n  Text(\n  \"Try to experiment, edit the `src/main.py` and wait for it to reload automatically on a liveserver. Anyways, I'm a component!\",\n  className=\"desc\"\n  )\n  ]\n  )\n", ["pyfyre.widgets"]], "pyfyre.user.src.components": [".py", "", [], 1], "pyfyre.user.src.css": [".py", "", [], 1], "pyfyre.widgets.button": [".py", "from pyfyre.widgets.widget import Widget\n\nclass Button(Widget):\n\n def __init__(self,textContent,onClick=lambda :print(\"\"),className=\"\",props:dict=None ):\n  super().__init__(\"button\",className=className,props=props)\n  self.textContent=textContent\n  self.onClick=onClick\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  \n  element.bind(\"click\",self.onClick)\n  \n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.clickable": [".py", "from pyfyre.widgets.widget import Widget\n\nclass Clickable(Widget):\n\n def __init__(self,bind,onclick,className=\"\",props:dict=None ):\n  super().__init__(\"div\",className=className,props=props)\n  self.bind=bind\n  self.onclick=onclick\n  \n def dom(self):\n  element=super().dom()\n  \n  element.appendChild(self.bind.dom())\n  \n  element.bind(\"click\",self.onclick)\n  \n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.container": [".py", "from pyfyre.widgets.widget import Widget\n\nclass Container(Widget):\n\n def __init__(self,children=[],className=\"\",props:dict=None ):\n  super().__init__(\"div\",className=className,props=props)\n  self.children=children\n  \n def dom(self):\n  element=super().dom()\n  \n  for child in self.children:\n   element.appendChild(child.dom())\n   \n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.image": [".py", "from pyfyre.widgets.widget import Widget\n\nclass Image(Widget):\n\n def __init__(self,src,className=\"\",props:dict=None ):\n  super().__init__(\"img\",className=className,props=props)\n  self.src=src\n  \n def dom(self):\n  element=super().dom()\n  element.src=self.src\n  \n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.link": [".py", "from pyfyre.widgets.widget import Widget\n\nfrom pyfyre.router import Router\n\nclass Link(Widget):\n\n def __init__(self,textContent:str,to='/',className=\"\",props:dict=None ):\n  super().__init__(\"a\",className=className,props=props)\n  self.textContent=textContent\n  self.to=to\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  element.href=\"#\"\n  \n  element.bind(\"click\",self.navigate)\n  \n  return element\n  \n def navigate(self,e):\n  e.preventDefault()\n  Router.push(self.to)\n", ["pyfyre.router", "pyfyre.widgets.widget"]], "pyfyre.widgets.listbuilder": [".py", "from pyfyre.widgets.widget import Widget\n\nclass ListBuilder(Widget):\n\n def __init__(self,count=1,builder=None ,className=\"\",props:dict=None ):\n  super().__init__(\"div\",className=className,props=props)\n  self.count=count\n  self.builder=builder\n  \n def dom(self):\n  element=super().dom()\n  \n  for i in range(self.count):\n   element.appendChild(self.builder(i).dom())\n   \n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.states": [".py", "''\n\nfrom pyfyre.widgets.widget import Widget\nfrom pyfyre.core.exceptions import RenderError\n\nclass UsesState:\n\n def __init__(self):\n  self.domElement=None\n  \n def build(self):\n  pass\n  \n def dom(self):\n  try :\n   self.domElement=self.build().dom()\n   return self.domElement\n  except Exception as e:\n   self.domElement=self.onerror(e).printScreen()\n   return self.domElement\n   \n def onerror(self,e):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  \n  print(\"ERR!\",e)\n  \n  return RenderError(\"Oh no! Something went wrong. We're working on fixing it.\")\n  \n def update(self):\n  ''\n\n\n  \n  \n  parentNode=self.domElement.parentNode\n  self.domElement.remove()\n  self.domElement=self.dom()\n  parentNode.appendChild(self.domElement)\n", ["pyfyre.core.exceptions", "pyfyre.widgets.widget"]], "pyfyre.widgets.text": [".py", "from pyfyre.widgets.widget import Widget\n\nclass Text(Widget):\n\n def __init__(self,textContent:str,className=\"\",props:dict=None ):\n  super().__init__(\"p\",className=className,props=props)\n  self.textContent=textContent\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  \n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.widget": [".py", "from browser import document\n\nclass Widget:\n\n def __init__(self,tagname:str,*,className,props:dict=None ):\n  self.tagname=tagname\n  self.className=className\n  self.element=None\n  self.props=props if props is not None else {}\n  \n def dom(self):\n  element=document.createElement(self.tagname)\n  element.className=self.className\n  \n  self.element=element\n  \n  for key,value in self.props.items():\n   element.attrs[key]=value\n   \n  return element\n", ["browser"]], "pyfyre.widgets": [".py", "from pyfyre.widgets.button import Button\nfrom pyfyre.widgets.container import Container\nfrom pyfyre.widgets.image import Image\nfrom pyfyre.widgets.link import Link\nfrom pyfyre.widgets.listbuilder import ListBuilder\nfrom pyfyre.widgets.states import UsesState\nfrom pyfyre.widgets.text import Text\n\n__all__=[\n'Button','Container','Image',\n'Link','ListBuilder','UsesState',\n'Text'\n]\n", ["pyfyre.widgets.button", "pyfyre.widgets.container", "pyfyre.widgets.image", "pyfyre.widgets.link", "pyfyre.widgets.listbuilder", "pyfyre.widgets.states", "pyfyre.widgets.text"], 1]}
__BRYTHON__.update_VFS(scripts)
