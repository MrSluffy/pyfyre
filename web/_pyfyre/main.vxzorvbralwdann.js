__BRYTHON__.use_VFS = true;
var scripts = {'$timestamp': 1645442219730, 'src': ['.py', 'from pyfyre.widgets import *\nfrom pyfyre.pyfyre import runApp\nfrom pyfyre.router import Router\nfrom src.main import HomePage\nfrom src.components.header import Header\n\nclass App(UsesState):\n def build(self):\n  return Router(\n  routes={\n  "/":Home()\n  }\n  )\n  \nclass Home(Container):\n def __init__(self):\n  super().__init__(\n  className="home",\n  children=[\n  Header(),\n  HomePage()\n  ]\n  )\n  \nrunApp(\nApp(),\nmount="app-mount"\n)\n', ['pyfyre.pyfyre', 'pyfyre.router', 'pyfyre.widgets', 'src.components.header', 'src.main'], 1], 'src.components': ['.py', '', [], 1], 'src.components.cta': ['.py', 'from pyfyre.widgets import *\n\nclass CallToAction(Container):\n def __init__(self,title,desc,link):\n  super().__init__(\n  className="flex flex-col w-full h-3/6 justify-center mx-auto bg-gradient-to-r from-[#4568dc] to-[#b06ab3] text-white p-10",\n  children=[\n  Text(\n  className="text-md font-bold",\n  textContent=title\n  ),\n  Text(\n  className="text-3xl w-4/6 font-normal",\n  textContent=desc\n  ),\n  Container(\n  className="mt-5",\n  children=[\n  Link(\n  className="bg-transparent border border-white w-fit px-5 py-2 text-base rounded-3xl cursor-pointer hover:bg-white hover:text-[#222222]",\n  textContent=f"Visit {link}",\n  to=link,\n  external=True\n  )\n  ]\n  )\n  ]\n  )\n', ['pyfyre.widgets']], 'src.components.header': ['.py', 'from pyfyre.widgets import *\n\nclass Header(Container):\n def __init__(self):\n \n  _nav_items=[\n  ["Documentation","https://pyfyre.gitbook.io/docs/"],\n  \n  \n  ]\n  \n  def nav_items(i):\n   return Link(\n   className="block py-2 pr-4 pl-3 text-base text-black md:bg-transparent md:text-black md:p-0 dark:text-white cursor-pointer",\n   textContent=_nav_items[i][0],\n   to=_nav_items[i][1],\n   external=True\n   )\n   \n  super().__init__(\n  className="bg-white border-gray-200 px-2 sm:px-4 py-2.5 dark:bg-gray-800 border-b-2 sticky top-0",\n  children=[\n  Container(\n  className="flex flex-wrap justify-between items-center mx-auto",\n  children=[\n  Container(\n  className="flex",\n  children=[\n  Image(\n  className="w-10",\n  src="https://scontent.fmnl13-1.fna.fbcdn.net/v/t1.6435-9/164540820_110370211141719_22088476788963606_n.jpg?_nc_cat=104&ccb=1-5&_nc_sid=09cbfe&_nc_ohc=Qg8QkUIRCLIAX9ll7Gs&tn=LaPlocOuMCICDrK8&_nc_ht=scontent.fmnl13-1.fna&oh=00_AT8iHOF8SKnb4kNw1oUH24roDJ3w7HQdux72Jdf2850yrg&oe=62169F42"\n  ),\n  ]\n  ),\n  Container(\n  className="flex items-center space-x-5",\n  children=[\n  ListBuilder(\n  className="invisible flex space-x-5 lg:visible",\n  count=len(_nav_items),\n  builder=nav_items\n  ),\n  Link(\n  className="text-white cursor-pointer font-black bg-[#fab327] focus:ring-4 font-medium rounded-3xl text-sm px-5 py-2.5 text-center mr-3 md:mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800",\n  textContent="Get Started",\n  to="https://pyfyre.gitbook.io/docs/quick-start",\n  external=True\n  )\n  ]\n  ),\n  ]\n  )\n  ]\n  )\n', ['pyfyre.widgets']], 'src.main': ['.py', 'from pyfyre.widgets import *\nfrom src.components.cta import CallToAction\n\n\n\nclass HomePage(Container):\n def __init__(self):\n \n  _features=[\n  [\n  "Developer friendly",\n  "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png",\n  "The language you already know.",\n  "PyFyre allows you to develop apps with the language you already know, Python. Create reactive websites fast with ease. Build your apps in minutes, not days.",\n  "Show me"\n  ],\n  [\n  "Fast",\n  "https://i.imgur.com/yI8tUab.png",\n  "Fast transpilation time on the fly.",\n  "PyFyre transpiles your code into small, vanilla JS that works for every browser with the power of Brython that stays fast, and always will be.",\n  "Show me"\n  ],\n  [\n  "Productive",\n  "https://pbs.twimg.com/profile_images/909757546063323137/-RIWgodF_400x400.jpg",\n  "Use Python Packages on the web.",\n  "Use CPython\'s existing packages on PyPi.org/, develop sites quickly and efficiently with a large selection of packages.",\n  "Visit pypi.org/"\n  ],\n  ]\n  \n  layouts=[]\n  \n  for i in range(len(_features)):\n   layout_1="md:flex-row-reverse"if i %2 ==0 else "md:flex-row"\n   layout_2="items-start"if i %2 ==0 else "items-end"\n   \n   _layouts=[]\n   _layouts.append(layout_1)\n   _layouts.append(layout_2)\n   \n   layouts.append(_layouts)\n   \n  def feature(i):\n   return Container(\n   className="",\n   children=[\n   Container(\n   className=f"flex flex-col items-center px-5 py-16 mx-auto {layouts[i][0]} lg:px-28",\n   children=[\n   Container(\n   className="w-full mb-10 lg:w-1/3 lg:w-3/12 md:w-1/2",\n   children=[\n   Image(\n   className="object-cover object-center rounded-lg w-52 mx-auto md:w-auto",\n   src=_features[i][1]\n   )\n   ]\n   ),\n   Container(\n   className=f"flex flex-col {layouts[i][1]} mb-16 text-left lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 md:mb-0",\n   children=[\n   Text(\n   className="mb-8 text-lg font-semibold tracking-widest text-black uppercase title-font",\n   textContent=_features[i][0]\n   ),\n   Text(\n   className="mb-8 text-2xl font-black tracking-tighter text-black md:text-5xl title-font",\n   textContent=_features[i][2]\n   ),\n   Text(\n   className="mb-8 text-base leading-relaxed text-left text-blueGray-600",\n   textContent=_features[i][3]\n   )\n   ]\n   )\n   ]\n   ),\n   ]\n   )\n   \n  super().__init__(\n  className="flex flex-col h-screen w-full",\n  children=[\n  Container(\n  className="flex flex-col w-full h-5/6",\n  children=[\n  Container(\n  className="flex flex-col w-full mt-28",\n  children=[\n  Container(\n  className="flex flex-col",\n  children=[\n  Text(\n  className="text-5xl mx-auto font-bold bg-clip-text h-20 text-[#222222] xl:text-7xl",\n  textContent="Build reactive"\n  ),\n  Text(\n  className="text-5xl mx-auto font-bold bg-clip-text h-20 text-transparent bg-gradient-to-r from-cyan-500 to-blue-500 xl:text-7xl",\n  textContent="UI using Python."\n  ),\n  ]\n  ),\n  Text(\n  className="text-lg px-10 xl:text-xl mx-auto mt-5 xl:px-52 text-center text-[#3c3c3c]",\n  textContent="A fast, declarative, and incrementally adoptable Python web frontend framework for building reactive web user interfaces."\n  )\n  ]\n  ),\n  Container(\n  className="flex space-x-3 mx-auto mt-20 mb-44",\n  children=[\n  Link(\n  className="bg-[#fab327] w-fit px-5 py-2 text-base rounded-3xl text-white cursor-pointer",\n  textContent="Get started",\n  to="https://pyfyre.gitbook.io/docs/",\n  external=True\n  ),\n  Link(\n  className="bg-[#f1f1f1] w-fit px-5 py-2 text-base rounded-xl text-[#474747] hover:text-[#333333] cursor-pointer",\n  textContent="Install",\n  to="https://pyfyre.gitbook.io/docs/quick-start",\n  external=True\n  )\n  ]\n  )\n  ]\n  ),\n  ListBuilder(\n  count=len(_features),\n  builder=feature\n  ),\n  CallToAction("Brython","PyFyre is powered by Brython, a Python 3 implementation for client-side web programming.","https://brython.info"),\n  ]\n  )\n', ['pyfyre.widgets', 'src.components.cta']], '_ajax': ['.js', '// ajax\nvar $module = (function($B){\n\n\nvar $N = $B.builtins.None,\n    _b_ = $B.builtins\n\nvar add_to_res = function(res, key, val) {\n    if(_b_.isinstance(val, _b_.list)){\n        for (j = 0; j < val.length; j++) {\n            add_to_res(res, key, val[j])\n        }\n    }else if (val instanceof File || val instanceof Blob){\n        res.append(key, val)\n    }else{res.append(key, _b_.str.$factory(val))}\n}\n\nfunction set_timeout(self, timeout){\n    if(timeout.seconds !== undefined){\n        self.js.$requestTimer = setTimeout(\n            function() {\n                self.js.abort()\n                if(timeout.func){\n                    timeout.func()\n                }\n            },\n            timeout.seconds * 1000)\n    }\n}\n\nfunction _read(req){\n    var xhr = req.js\n    if(xhr.responseType == "json"){\n        return $B.structuredclone2pyobj(xhr.response)\n    }\n    if(req.charset_user_defined){\n        // on blocking mode, xhr.response is a string\n        var bytes = []\n        for(var i = 0, len = xhr.response.length; i < len; i++){\n            var cp = xhr.response.codePointAt(i)\n            if(cp > 0xf700){\n                bytes.push(cp - 0xf700)\n            }else{\n                bytes.push(cp)\n            }\n        }\n    }else if(typeof xhr.response == "string"){\n        if(req.mode == \'binary\'){\n            return _b_.str.encode(xhr.response, req.encoding || \'utf-8\')\n        }\n        return xhr.response\n    }else{\n        // else it\'s an ArrayBuffer\n        var buf = new Uint8Array(xhr.response),\n            bytes = Array.from(buf.values())\n    }\n    var b = _b_.bytes.$factory(bytes)\n    if(req.mode == "binary"){\n        return b\n    }else if(req.mode == "document"){\n        return $B.JSObj.$factory(xhr.response)\n    }else{\n        var encoding = req.encoding || "utf-8"\n        return _b_.bytes.decode(b, encoding)\n    }\n}\n\nfunction handle_kwargs(self, kw, method){\n    var data,\n        encoding,\n        headers={},\n        cache,\n        mode = "text",\n        timeout = {}\n    for(var key in kw.$string_dict){\n        if(key == "data"){\n            var params = kw.$string_dict[key][0]\n            if(typeof params == "string"){\n                data = params\n            }else if(params.__class__ === _b_.dict){\n                for(var key in params.$numeric_dict){\n                    throw _b_.ValueError.$factory(\n                        \'data only supports string keys, got \' + key)\n                }\n                params = params.$string_dict\n                var items = []\n                for(var key in params){\n                    items.push(encodeURIComponent(key) + "=" +\n                               encodeURIComponent(params[key][0]))\n                }\n                data = items.join("&")\n            }else{\n                throw _b_.TypeError.$factory("wrong type for data: " +\n                    $B.class_name(params))\n            }\n        }else if(key == "encoding"){\n            encoding = kw.$string_dict[key][0]\n        }else if(key == "headers"){\n            var value = kw.$string_dict[key][0]\n            if(! _b_.isinstance(value, _b_.dict)){\n                throw _b_.ValueError.$factory(\n                    "headers must be a dict, not " + $B.class_name(value))\n            }\n            for(key in value.$string_dict){\n                headers[key.toLowerCase()] = [key, value.$string_dict[key][0]]\n            }\n        }else if(key.startsWith("on")){\n            var event = key.substr(2)\n            if(event == "timeout"){\n                timeout.func = kw.$string_dict[key][0]\n            }else{\n                var f = kw.$string_dict[key][0]\n                ajax.bind(self, event, f)\n            }\n        }else if(key == "mode"){\n            var mode = kw.$string_dict[key][0]\n        }else if(key == "timeout"){\n            timeout.seconds = kw.$string_dict[key][0]\n        }else if(key == "cache"){\n            cache = kw.$string_dict[key][0]\n        }\n    }\n    if(encoding && mode != "text"){\n        throw _b_.ValueError.$factory("encoding not supported for mode " +\n            mode)\n    }\n    if((method == "post" || method == "put") && ! headers){\n        // For POST requests, set default header\n        self.js.setRequestHeader("Content-type",\n                                 "application/x-www-form-urlencoded")\n    }\n    return {cache, data, encoding, headers, mode, timeout}\n}\n\nvar ajax = {\n    __class__: _b_.type,\n    __mro__: [_b_.object],\n\n    __repr__ : function(self){return \'<object Ajax>\'},\n    __str__ : function(self){return \'<object Ajax>\'},\n\n    $infos: {\n        __module__: "builtins",\n        __name__: "ajax"\n    },\n\n    __getattribute__: function(self, attr){\n        if(ajax[attr] !== undefined){\n            return function(){\n                return ajax[attr].call(null, self, ...arguments)\n            }\n        }else if(attr == "text"){\n            return _read(self)\n        }else if(attr == "json"){\n            if(self.js.responseType == "json"){\n                return _read(self)\n            }else{\n                var resp = _read(self)\n                try{\n                    return $B.structuredclone2pyobj(JSON.parse(resp))\n                }catch(err){\n                    console.log(\'attr json, invalid resp\', resp)\n                    throw err\n                }\n            }\n        }else if(self.js[attr] !== undefined){\n            if(typeof self.js[attr] == "function"){\n                return function(){\n                    if(attr == "setRequestHeader"){\n                        ajax.set_header.call(null, self, ...arguments)\n                    }else{\n                        if(attr == \'overrideMimeType\'){\n                            console.log(\'override mime type\')\n                            self.hasMimeType = true\n                        }\n                        return self.js[attr](...arguments)\n                    }\n                }\n            }else{\n                return self.js[attr]\n            }\n        }else if(attr == "xml"){\n            return $B.JSObj.$factory(self.js.responseXML)\n        }\n    },\n\n    bind: function(self, evt, func){\n        // req.bind(evt,func) is the same as req.onevt = func\n        self.js[\'on\' + evt] = function(){\n            try{\n                return func.apply(null, arguments)\n            }catch(err){\n                $B.handle_error(err)\n            }\n        }\n        return _b_.None\n    },\n\n    open: function(){\n        var $ = $B.args(\'open\', 4,\n                {self: null, method: null, url: null, async: null},\n                [\'self\', \'method\', \'url\', \'async\'], arguments,\n                {async: true}, null, null),\n            self = $.self,\n            method = $.method,\n            url = $.url,\n            async = $.async\n        if(typeof method !== "string"){\n            throw _b_.TypeError.$factory(\n                \'open() argument method should be string, got \' +\n                $B.class_name(method))\n        }\n        if(typeof url !== "string"){\n            throw _b_.TypeError.$factory(\n                \'open() argument url should be string, got \' +\n                $B.class_name(url))\n        }\n        self.$method = method\n        self.blocking = ! self.async\n        self.js.open(method, url, async)\n    },\n\n    read: function(self){\n        return _read(self)\n    },\n\n    send: function(self, params){\n        // params can be Python dictionary or string\n        var content_type\n        for(var key in self.headers){\n            var header = self.headers[key]\n            self.js.setRequestHeader(header[0], header[1])\n            if(key == \'content-type\'){\n                content_type = header[1]\n            }\n        }\n        if((self.encoding || self.blocking) && ! self.hasMimeType){\n            // On blocking mode, or if an encoding has been specified,\n            // override Mime type so that bytes are not processed\n            // (unless the Mime type has been explicitely set)\n            self.js.overrideMimeType(\'text/plain;charset=x-user-defined\')\n            self.charset_user_defined = true\n        }\n        var res = \'\'\n        if(! params){\n            self.js.send()\n            return _b_.None\n        }\n        if(_b_.isinstance(params, _b_.str)){\n            res = params\n        }else if(_b_.isinstance(params, _b_.dict)){\n            if(content_type == \'multipart/form-data\'){\n                // The FormData object serializes the data in the \'multipart/form-data\'\n                // content-type so we may as well override that header if it was set\n                // by the user.\n                res = new FormData()\n                var items = _b_.list.$factory(_b_.dict.items(params))\n                for(var i = 0, len = items.length; i < len; i++){\n                    add_to_res(res, _b_.str.$factory(items[i][0]), items[i][1])\n                }\n            }else{\n                if(self.$method && self.$method.toUpperCase() == "POST" &&\n                        ! content_type){\n                    // Set default Content-Type for POST requests\n                    self.js.setRequestHeader("Content-Type",\n                        "application/x-www-form-urlencoded")\n                }\n                var items = _b_.list.$factory(_b_.dict.items(params))\n                for(var i = 0, len = items.length; i < len; i++){\n                    var key = encodeURIComponent(_b_.str.$factory(items[i][0]));\n                    if(_b_.isinstance(items[i][1], _b_.list)){\n                        for (j = 0; j < items[i][1].length; j++) {\n                            res += key +\'=\' +\n                                encodeURIComponent(_b_.str.$factory(items[i][1][j])) + \'&\'\n                        }\n                    }else{\n                        res += key + \'=\' +\n                            encodeURIComponent(_b_.str.$factory(items[i][1])) + \'&\'\n                    }\n                }\n                res = res.substr(0, res.length - 1)\n            }\n        }else{\n            throw _b_.TypeError.$factory(\n                "send() argument must be string or dictionary, not \'" +\n                _b_.str.$factory(params.__class__) + "\'")\n        }\n        self.js.send(res)\n        return _b_.None\n    },\n\n    set_header: function(self, key, value){\n        self.headers[key.toLowerCase()] = [key, value]\n    },\n\n    set_timeout: function(self, seconds, func){\n        self.js.$requestTimer = setTimeout(\n            function() {\n                self.js.abort()\n                func()\n            },\n            seconds * 1000)\n    }\n\n}\n\najax.$factory = function(){\n\n    if(window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari\n        var xmlhttp = new XMLHttpRequest()\n    }else{// code for IE6, IE5\n        var xmlhttp = new ActiveXObject("Microsoft.XMLHTTP")\n    }\n    xmlhttp.onreadystatechange = function(){\n        // here, "this" refers to xmlhttp\n        var state = this.readyState\n        if(this.responseType == "" || this.responseType == "text"){\n            res.js.text = this.responseText\n        }\n        var timer = this.$requestTimer\n        if(state == 0 && this.onuninitialized){\n            this.onuninitialized(res)\n        }else if(state == 1 && this.onloading){\n            this.onloading(res)\n        }else if(state == 2 && this.onloaded){\n            this.onloaded(res)\n        }else if(state == 3 && this.oninteractive){\n            this.oninteractive(res)\n        }else if(state == 4 && this.oncomplete){\n            if(timer !== null){\n                window.clearTimeout(timer)\n            }\n            this.oncomplete(res)\n        }\n    }\n    var res = {\n        __class__: ajax,\n        js: xmlhttp,\n        headers: {}\n    }\n    return res\n}\n\nfunction _request_without_body(method){\n    var $ = $B.args(method, 3, {method: null, url: null, blocking: null},\n        ["method", "url", "blocking"], arguments, {blocking: false},\n        null, "kw"),\n    method = $.method,\n    url = $.url,\n    async = !$.blocking,\n    kw = $.kw\n    var self = ajax.$factory()\n    self.blocking = $.blocking\n    var items = handle_kwargs(self, kw, method),\n        mode = self.mode = items.mode,\n        encoding = self.encoding = items.encoding\n        qs = items.data,\n        timeout = items.timeout\n    set_timeout(self, timeout)\n    if(qs){\n        url += "?" + qs\n    }\n    if(! (items.cache === true)){\n        url += (qs ? "&" : "?") + (new Date()).getTime()\n    }\n    self.js.open(method.toUpperCase(), url, async)\n\n    if(async){\n        if(mode == "json" || mode == "document"){\n            self.js.responseType = mode\n        }else{\n            self.js.responseType = "arraybuffer"\n            if(mode != "text" && mode != "binary"){\n                throw _b_.ValueError.$factory("invalid mode: " + mode)\n            }\n        }\n    }else{\n        self.js.overrideMimeType(\'text/plain;charset=x-user-defined\')\n        self.charset_user_defined = true\n    }\n    for(var key in items.headers){\n        var header = items.headers[key]\n        self.js.setRequestHeader(header[0], header[1])\n    }\n    // Add function read() to return str or bytes according to mode\n    self.js.send()\n}\n\nfunction _request_with_body(method){\n    var $ = $B.args(method, 3, {method: null, url: null, blocking: null},\n        ["method", "url", "blocking"], arguments, {blocking: false},\n        null, "kw"),\n        method = $.method,\n        url = $.url,\n        async = !$.blocking,\n        kw = $.kw,\n        content_type\n\n    var self = ajax.$factory()\n    self.js.open(method.toUpperCase(), url, async)\n    var items = handle_kwargs(self, kw, method),\n        data = items.data,\n        timeout = items.timeout\n    set_timeout(self, timeout)\n    for(var key in items.headers){\n        var header = items.headers[key]\n        self.js.setRequestHeader(header[0], header[1])\n        if(key == \'content-type\'){\n            content_type = header[1]\n        }\n    }\n    if(method.toUpperCase() == \'POST\' && !content_type){\n        // set default Content-Type for POST requests\n        self.js.setRequestHeader(\'Content-Type\',\n            \'application/x-www-form-urlencoded\')\n    }\n\n    // Add function read() to return str or bytes according to mode\n    self.js.read = function(){\n        return _read(self)\n    }\n    self.js.send(data)\n}\n\nfunction connect(){\n    _request_without_body.call(null, "connect", ...arguments)\n}\n\nfunction _delete(){\n    _request_without_body.call(null, "delete", ...arguments)\n}\n\nfunction get(){\n    _request_without_body.call(null, "get", ...arguments)\n}\n\nfunction head(){\n    _request_without_body.call(null, "head", ...arguments)\n}\n\nfunction options(){\n    _request_without_body.call(null, "options", ...arguments)\n}\n\nfunction patch(){\n    _request_with_body.call(null, "put", ...arguments)\n}\n\nfunction post(){\n    _request_with_body.call(null, "post", ...arguments)\n}\n\nfunction put(){\n    _request_with_body.call(null, "put", ...arguments)\n}\n\nfunction trace(){\n    _request_without_body.call(null, "trace", ...arguments)\n}\n\nfunction file_upload(){\n    // ajax.file_upload(url, file, method="POST", **callbacks)\n    var $ = $B.args("file_upload", 2, {url: null, "file": file},\n            ["url", "file"], arguments, {}, null, "kw"),\n        url = $.url,\n        file = $.file,\n        kw = $.kw\n\n    var self = ajax.$factory(),\n        method = \'POST\',\n        field_name = \'filetosave\'\n\n    if(kw.$string_dict.method !== undefined){\n        method = kw.$string_dict.method[0]\n    }\n\n    if(kw.$string_dict.field_name !== undefined){\n        field_name = kw.$string_dict.field_name[0]\n    }\n\n    var formdata = new FormData()\n    formdata.append(field_name, file, file.name)\n\n    self.js.open(method, url, _b_.True)\n    self.js.send(formdata)\n\n    for(key in kw.$string_dict){\n        if(key.startsWith("on")){\n            ajax.bind(self, key.substr(2), kw.$string_dict[key][0])\n        }\n    }\n}\n\n$B.set_func_names(ajax)\n\nreturn {\n    ajax: ajax,\n    Ajax: ajax,\n    delete: _delete,\n    file_upload: file_upload,\n    connect,\n    get,\n    head,\n    options,\n    patch,\n    post,\n    put,\n    trace\n}\n\n})(__BRYTHON__)\n'], 'browser': ['.py', '', [], 1], 'browser.ajax': ['.py', 'from _ajax import *\n', ['_ajax']], 'pyfyre': ['.py', '', [], 1], 'pyfyre.ajax': ['.py', 'from browser import ajax\n\nclass Ajax:\n \'\'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n @staticmethod\n def get(url,mode="json",then=None ):\n  \'\'\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  ajax.get(url,mode=mode,oncomplete=then)\n', ['browser'], 1], 'pyfyre.core': ['.py', '', [], 1], 'pyfyre.core.exceptions': ['.py', 'from pyfyre.widgets.widget import Widget\n\nclass BaseException:\n def __init__(self,e):\n  self.e=e\n  \n def dom(self):\n  return self.TextException(self.e).dom()\n  \n class TextException(Widget):\n  def __init__(self,error:str,className="",props:dict=None ):\n   super().__init__("h1",className=className,props=props)\n   self.error=error\n   \n  def dom(self):\n   element=super().dom()\n   element.textContent=self.error\n   \n   element.attrs["style"]="background-color: #efa3a3; width: fit-content; padding: 10px;"\n   \n   return element\n   \nclass RenderError(BaseException):...\n', ['pyfyre.widgets.widget']], 'pyfyre.globals': ['.py', '\nclass Globals:\n\n\n\n __PARENT__=None\n \n \n \n __LOC__=None\n \n \n DYNAMIC_ROUTES=[]\n \n \n PATH_INITIALIZED=False\n \n \n \n __EVENTS__={}\n \n \n \n __ASSETS__=""\n', [], 1], 'pyfyre.globals.events': ['.py', "from pyfyre.globals import Globals\n\nclass Events:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n @staticmethod\n def add(event):\n  ''\n\n\n\n\n\n  \n  Globals.__EVENTS__[event]=[]\n  \n @staticmethod\n def addListener(event,listener):\n  ''\n\n\n\n\n\n\n\n\n  \n  Globals.__EVENTS__[event].append(listener)\n  \n @staticmethod\n def broadcast(event):\n  ''\n\n\n\n\n\n  \n  for func in Globals.__EVENTS__[event]:\n   func()\n", ['pyfyre.globals']], 'pyfyre.management': ['.py', '#!/usr/bin/env python3\n\nimport os,sys,random,string,time\nfrom shutil import copytree,rmtree\nfrom distutils.dir_util import copy_tree\n\nfrom .python_minifier import minify\n\ndef execute_from_command_line(argv=None ):\n utility=ManagementUtility()\n \n """Entry Point"""\n try :\n  if sys.argv[1]=="create-app":\n   try :\n    name=sys.argv[2]\n   except IndexError:\n    name="MyApp"\n    \n   try :\n    description=sys.argv[3]\n   except IndexError:\n    description="PyFyre web application."\n    \n   utility.create_app(name,description)\n  elif sys.argv[1]=="runapp":\n   try :\n    port=sys.argv[2]\n   except IndexError:\n    port=None\n    \n   try :\n    directory=sys.argv[3]\n   except IndexError:\n    directory=None\n    \n   utility.run_app(directory,port)\n  elif sys.argv[1]=="build":\n   try :\n    directory=sys.argv[2]\n   except IndexError:\n    directory=None\n    \n   utility.build_app(directory)\n  elif sys.argv[1]=="help":\n   utility.pyfyre_help()\n  else :\n   utility.pyfyre_help()\n except IndexError as e:\n  utility.pyfyre_help()\n  \nclass ManagementUtility:\n def pyfyre_help(self):\n  PYFYRE_HELP="""Manage your PyFyre projects.\n\n        Common Commands:\n\n            pyfyre.py create-app [name] [description]\n                Create a new PyFyre project in your current directory.\n\n            pyfyre.py runserver [port=8080]\n                Run a live server in your current directory.\n\n            pyfyre.py help\n                Show this message.\n        """\n  print(PYFYRE_HELP)\n  \n def create_app(self,app_name:str,app_description:str):\n  \'\'\n  \n  print("Creating your PyFyre project...")\n  \n  path=os.path.join(os.getcwd(),app_name)\n  \n  try :\n   os.makedirs(path)\n  except FileExistsError:\n   prompt=input(f"Project already exists. Want to overwrite the project \'{app_name}\'? (y or n): ")\n   \n   if prompt =="y":\n    rmtree(path)\n    os.makedirs(path)\n   else :\n    print("Aborting...")\n    return\n    \n    \n  core_dir=os.path.abspath(os.path.join(os.path.dirname(__file__),".."))\n  copy_tree(core_dir,os.path.join(path,"pyfyre"))\n  \n  \n  user_dir=os.path.abspath(os.path.join(os.path.dirname(__file__),"..","user"))\n  copy_tree(user_dir,path)\n  \n  \n  with open(os.path.join(user_dir,"index.html"))as file:\n   content=file.read().format(app_name=app_name,app_description=app_description,main_key="{main_key}")\n  with open(os.path.join(user_dir,"index.html"),"w")as file:\n   file.write(content)\n   \n   \n  with open(os.path.join(user_dir,"README.md"))as file:\n   content=file.read().format(app_name=app_name,app_description=app_description)\n  with open(os.path.join(path,"README.md"),"w")as file:\n   file.write(content)\n   \n   \n  with open(os.path.join(user_dir,"settings.yaml"))as file:\n   content=file.read().format(app_name=app_name,app_description=app_description)\n  with open(os.path.join(path,"settings.yaml"),"w")as file:\n   file.write(content)\n   \n   \n  with open(os.path.join(path,".gitignore"),"w")as file:\n   file.write(__GITIGNORE__)\n   \n  os.chdir(os.path.join(path,"pyfyre"))\n  \n  os.system("brython-cli --install")\n  \n  \n  os.remove("demo.html")\n  os.remove("unicode.txt")\n  os.remove("README.txt")\n  os.remove("brython.js")\n  os.remove("index.html")\n  \n  rmtree(os.path.join(path,"pyfyre","management"))\n  rmtree(os.path.join(path,"pyfyre","user"))\n  \n  self.minify_dir(os.path.join(path,"pyfyre"))\n  \n  os.system("brython-cli --make_package pyfyre")\n  os.remove("pyfyre.py")\n  os.system("brython-cli --modules")\n  \n  os.chdir(os.path.join(".."))\n  os.mkdir("pyf_modules")\n  \n  with open(os.path.join(path,"pyfyre","brython_modules.js"))as file:\n   content=file.read()\n  with open(os.path.join("pyf_modules","builtins.js"),"w")as file:\n   file.write(content)\n  with open(os.path.join(path,"pyfyre","pyfyre.brython.js"))as file:\n   content=file.read()\n  with open(os.path.join("pyf_modules","modules.js"),"w")as file:\n   file.write(content)\n   \n  rmtree("pyfyre")\n  os.system("cls"if os.name =="nt"else "clear")\n  \n  print("Project created successfully.")\n  \n def produce(self,directory_path,build_path,reload=False ):\n \n \n \n  if not reload:\n   copytree(directory_path,build_path)\n   \n   for _,__,filenames in os.walk(os.path.join(build_path,"pyf_modules")):\n    for filename in filenames:\n    \n     _,ext=os.path.splitext(filename)\n     \n     if ext ==".js":\n      with open(os.path.join(directory_path,"pyf_modules",filename))as file:\n       content=file.read()\n      with open(os.path.join(build_path,filename),"w")as file:\n       file.write(content)\n       \n       \n   css_path=os.path.join(directory_path,"src","css")\n   src_css_path=os.path.join(build_path,"css")\n   \n   copytree(css_path,src_css_path)\n   \n  with open(os.path.join(build_path,"index.html"))as file:\n   index_content=file.read()\n   \n   \n  os.chdir(os.path.join(directory_path,"src"))\n  os.system("brython-cli --make_package src")\n  \n  \n  with open(os.path.join("src.brython.js"))as file:\n   content=file.read()\n  with open(os.path.join(build_path,"src.brython.js"),"w")as file:\n   file.write(content)\n  with open(os.path.join(build_path,"index.html"),"w")as file:\n   file.write(index_content)\n  with open(os.path.join(directory_path,"src","__init__.py"))as file:\n   content=file.read()\n  with open(os.path.join(build_path,"__init__.py"),"w")as file:\n   file.flush()\n   file.write(content)\n   \n  os.remove("src.brython.js")\n  \n  os.chdir(build_path)\n  \n  \n  if reload:\n  \n   _ignores=set(["__serve__","__dev__"])\n   \n   \n   for _,dirs,filenames in os.walk(build_path):\n    [dirs.remove(tmp)for tmp in list(dirs)if tmp in _ignores]\n    \n    for filename in filenames:\n     name,ext=os.path.splitext(filename)\n     \n     if ext ==".js":\n      if "main"in name:\n       with open(os.path.join(build_path,"src.brython.js"))as file:\n        content=file.read()\n       with open(filename,"w")as file:\n        file.write(content)\n        \n        \n   css_path=os.path.join(directory_path,"src","css")\n   src_css_path=os.path.join(build_path,"css")\n   \n   rmtree(src_css_path)\n   \n   src_css_path=os.path.join(build_path,"css")\n   \n   copytree(css_path,src_css_path)\n   \n   \n  if not reload:\n   try :rmtree("__serve__")\n   except Exception:...\n   \n   try :rmtree("__pycache__")\n   except Exception:...\n   \n   try :os.remove("requirements.txt")\n   except Exception:...\n   \n   try :os.remove("runtime.txt")\n   except Exception:...\n   \n   try :os.remove(".gitignore")\n   except Exception:...\n   \n   rmtree("pyf_modules")\n   os.remove("README.md")\n   os.remove("settings.yaml")\n   \n   rmtree("src")\n   \n def run_app(self,directory,port):\n  print("Running your app in a development server...")\n  \n  try :\n   from livereload import Server\n  except ImportError:\n   raise ImportError("Cannot find the liveserver module. Is it installed?")\n   \n  server=Server()\n  \n  _directory=os.path.abspath(directory)if directory else os.getcwd()\n  \n  if os.path.exists(os.path.join(_directory,"__serve__")):\n   rmtree(os.path.join(_directory,"__serve__"))\n   \n  _build=os.path.join(_directory,"__serve__")\n  \n  def reload():\n   print("Detected file changes, performing hot reload...")\n   self.produce(_directory,_build,reload=True )\n   self.produceJsBundle(_build,_directory,reload=True )\n   print("Hot reload successful!")\n   \n  self.produce(_directory,_build)\n  self.produceJsBundle(_build)\n  \n  os.system("cls"if os.name =="nt"else "clear")\n  \n  print("Happy Hacking!")\n  \n  server.watch(f"{_directory}/src/",reload)\n  server.serve(port=port if port else 8000,host="localhost",root=os.path.join(_directory,"__serve__"))\n  \n def build_app(self,directory):\n  print("Producing optimized build for your project...")\n  \n  directory_path=os.path.abspath(directory)if directory else os.getcwd()\n  \n  if os.path.exists(os.path.join(directory_path,"build")):\n   rmtree(os.path.join(directory_path,"build"))\n   \n  build_path=os.path.join(directory_path,"build")\n  \n  self.produce(directory_path,build_path)\n  self.produceJsBundle(build_path)\n  \n  print("Build succeeded!")\n  \n def produceJsBundle(self,build_path,directory_path=None ,reload=False ):\n \n  try :\n   import js2py\n  except ImportError:\n   raise ImportError("Cannot find js2py. Is it installed?")\n   \n  os.chdir(build_path)\n  \n  vfs={}\n  \n  ctx_main=js2py.EvalJs()\n  ctx_std=js2py.EvalJs()\n  ctx_pyf=js2py.EvalJs()\n  \n  with open(os.path.join(build_path,"src.brython.js"))as file:\n   content=file.readlines()\n   content.pop(0)\n   content.pop(1)\n   main_js=\'\'.join(content)\n  with open(os.path.join(build_path,"builtins.js")if not reload else os.path.join(directory_path,"pyf_modules","builtins.js"))as file:\n   content=file.readlines()\n   content.pop(0)\n   content.pop(0)\n   content.pop(1)\n   std_js=\'\'.join(content)\n  with open(os.path.join(build_path,"modules.js")if not reload else os.path.join(directory_path,"pyf_modules","modules.js"))as file:\n   content=file.readlines()\n   content.pop(0)\n   content.pop(1)\n   pyf_js=\'\'.join(content)\n   \n  ctx_main.execute(main_js)\n  ctx_std.execute(std_js)\n  ctx_pyf.execute(pyf_js)\n  \n  main_scripts=ctx_main.scripts.to_dict()\n  std_scripts=ctx_std.scripts.to_dict()\n  pyf_scripts=ctx_pyf.scripts.to_dict()\n  \n  def appendVfs(sc):\n   for k,v in list(sc.items()):\n    if k =="$timestamp":\n     sc.pop(k)\n     \n    vfs[k]=v\n    \n  appendVfs(main_scripts)\n  appendVfs(std_scripts)\n  appendVfs(pyf_scripts)\n  \n  main_key=\'\'.join(random.choice(string.ascii_lowercase)for i in range(15))\n  \n  if reload:\n   for _,_,files in os.walk(build_path):\n    for file in files:\n     name,ext=os.path.splitext(file)\n     \n     if ext ==".js":\n      if "main"in name:\n       name=name.split(\'.\')\n       main_key=name[-1]\n       \n  with open(os.path.join(build_path,f"main.{main_key}.js"),"w")as file:\n   vfs["$timestamp"]=int(1000 *time.time())\n   \n   brython=[\n   "__BRYTHON__.use_VFS = true;\\n",\n   f"var scripts = {str(vfs)}",\n   "\\n__BRYTHON__.update_VFS(scripts)"\n   ]\n   \n   file.writelines(brython)\n   \n  with open(os.path.join(build_path,"index.html"))as file:\n   content=file.read().format(main_key=main_key)\n  with open(os.path.join(build_path,"index.html"),"w")as file:\n   file.write(content)\n   \n  with open(os.path.join(build_path,"__init__.py"))as file:\n   minified=minify(file.read())\n  with open(os.path.join(build_path,"__init__.py"),"w")as file:\n   file.write(minified)\n   \n  os.remove(f"src.brython.js")\n  \n  if not reload:\n   os.remove(f"modules.js")\n   os.remove(f"builtins.js")\n   \n def minify_dir(self,path):\n  for dirpath,_,filenames in os.walk(path):\n   for filename in filenames:\n    _,ext=os.path.splitext(filename)\n    \n    if ext ==".py":\n     with open(os.path.join(dirpath,filename))as file:\n      minified=minify(file.read())\n     with open(os.path.join(dirpath,filename),"w")as file:\n      file.write(minified)\n      \n__GITIGNORE__="""# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# PyFyre\nbuild/\n__serve__/\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/"""\n\nif __name__ =="__main__":\n execute_from_command_line()\n', ['distutils.dir_util', 'js2py', 'livereload', 'os', 'pyfyre.management.python_minifier', 'random', 'shutil', 'string', 'sys', 'time'], 1], 'pyfyre.management.python_minifier': ['.py', '\'\'\nimport token\nimport tokenize\nimport re\nimport io\nfrom keyword import kwlist\n\nfor kw in ["async","await"]:\n if kw not in kwlist:\n  kwlist.append(kw)\n  \nasync_types=[]\nif hasattr(tokenize,"ASYNC"):\n async_types.append(tokenize.ASYNC)\nif hasattr(tokenize,"AWAIT"):\n async_types.append(tokenize.AWAIT)\n \ndef minify(src,preserve_lines=False ):\n\n file_obj=io.BytesIO(src.encode(\'utf-8\'))\n token_generator=tokenize.tokenize(file_obj.readline)\n \n out=\'\'\n line=0\n last_item=None\n last_type=None\n indent=0\n brackets=[]\n \n \n encoding=next(token_generator).string\n \n file_obj=io.BytesIO(src.encode(encoding))\n token_generator=tokenize.tokenize(file_obj.readline)\n \n for item in token_generator:\n \n  if token.tok_name[item.type]==\'OP\':\n   if item.string in \'([{\':\n    brackets.append(item.string)\n   elif item.string in \'}])\':\n    brackets.pop()\n    \n  sline=item.start[0]\n  if sline ==0:\n   continue\n   \n   \n  if item.type ==tokenize.INDENT:\n   indent +=1\n  elif item.type ==tokenize.DEDENT:\n   indent -=1\n   continue\n   \n  if sline >line:\n  \n   while out.count("\\n")<sline -1:\n    if last_item.line.rstrip().endswith("\\\\"):\n     out +="\\\\"\n    out +="\\n"\n    \n   if not brackets and item.type ==tokenize.STRING:\n    if last_type in [tokenize.NEWLINE,tokenize.INDENT,None ]:\n    \n    \n    \n    \n     out +=\' \'*indent+"\'\'"\n     if preserve_lines:\n      out +=\'\\n\'*item.string.count(\'\\n\')\n     continue\n   out +=\' \'*indent\n   if item.type not in [tokenize.INDENT,tokenize.COMMENT]:\n    out +=item.string\n   elif (item.type ==tokenize.COMMENT and\n   line <=2 and item.line.startswith(\'#!\')):\n   \n   \n    out +=item.string\n  else :\n   if item.type ==tokenize.COMMENT:\n    continue\n   if (not brackets and item.type ==tokenize.STRING and\n   last_type in [tokenize.NEWLINE,tokenize.INDENT]):\n   \n   \n    out +="\'\'"\n    if preserve_lines:\n     out +=\'\\n\'*item.string.count(\'\\n\')\n    continue\n   previous_types=[tokenize.NAME,tokenize.NUMBER]+async_types\n   if item.type in [tokenize.NAME,tokenize.NUMBER,tokenize.OP]and\\\n   last_type in previous_types:\n   \n    if (item.type !=tokenize.OP\\\n    or item.string not in \',()[].=:{}+&\'\\\n    or (last_type ==tokenize.NAME and\n    last_item.string in kwlist)):\n     out +=\' \'\n   elif (item.type ==tokenize.STRING and\n   last_type in [tokenize.NAME,tokenize.NUMBER]):\n   \n    out +=\' \'\n   elif (item.type ==tokenize.NAME and\n   item.string =="import"and\n   last_item.type ==tokenize.OP and\n   last_item.string ==\'.\'):\n   \n    out +=\' \'\n   elif (item.type in async_types and\n   last_item.type in previous_types):\n    out +=\' \'\n   out +=item.string\n   \n  line=item.end[0]\n  last_item=item\n  if item.type ==tokenize.NL and last_type ==tokenize.COMMENT:\n  \n   last_type=tokenize.NEWLINE\n  else :\n   last_type=item.type\n   \n   \n out=re.sub(r\'^\\s+$\',\'\',out,re.M)\n \n if not preserve_lines:\n \n  out=re.sub("^\'\'\\n",\'\',out)\n  \n  \n  out=re.sub(\'\\n( *\\n)+\',\'\\n\',out)\n  \n  \n  \n  def repl(mo):\n   if mo.groups()[0]==mo.groups()[1]:\n    return \'\\n\'+mo.groups()[1]\n   return mo.string[mo.start():mo.end()]\n  out=re.sub("\\n( *)\'\'\\n( *)",repl,out)\n  \n return out\n', ['io', 'keyword', 're', 'token', 'tokenize']], 'pyfyre.pyfyre': ['.py', 'from browser import document\nfrom pyfyre.globals import Globals\n\ndef runApp(app,mount="app-mount"):\n \'\'\n\n\n\n\n\n\n\n\n\n \n \n body=document.getElementById(mount)\n body.innerHTML=""\n body.appendChild(app.dom())\n \n Globals.__PARENT__=app\n', ['browser', 'pyfyre.globals']], 'pyfyre.router': ['.py', 'from pyfyre.globals import Globals\nfrom pyfyre.globals.events import Events\nfrom pyfyre.pyfyre import runApp\n\nfrom browser import window,bind\n\nclass Router:\n \'\'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,routes):\n  self.routes:dict=routes\n  \n  if not Globals.PATH_INITIALIZED:\n   Globals.__LOC__=window.location.pathname\n   Globals.PATH_INITIALIZED=True\n   \n  if not "change_route"in Globals.__EVENTS__:\n   Events.add("change_route")\n   \n   self.listenRoute()\n   \n  for routeName,view in self.routes.items():\n   pathname=routeName.split(\'/\')\n   \n   try :\n    query=pathname[-1]\n    pathurl=pathname[-2]\n    \n    if query[0]==":":\n     queryName=query.replace(":","")\n     Globals.DYNAMIC_ROUTES.append([pathurl,queryName,view])\n   except IndexError:...\n   \n def dom(self):\n \n  try :\n   dom=self.routes[Globals.__LOC__].dom()\n  except KeyError:\n   try :\n    _,pathurl=self.get_params()\n    \n    for route in Globals.DYNAMIC_ROUTES:\n     if route[0]==pathurl:\n      dom=route[2].dom()\n   except Exception as e:\n   \n   \n   \n    raise Exception("Path 404: Cannot find the path.")\n    \n  return dom\n  \n def listenRoute(self):\n  def changeRoute():\n   runApp(Globals.__PARENT__)\n   \n  Events.addListener("change_route",changeRoute)\n  \n @staticmethod\n def query():\n  query,pathurl=Router.get_params(Router)\n  \n  queryNames={}\n  \n  for route in Globals.DYNAMIC_ROUTES:\n   if route[0]==pathurl:\n    queryNames[route[1]]=query\n    \n  return queryNames\n  \n @staticmethod\n def push(location):\n  Globals.__LOC__=location\n  \n  Events.broadcast("change_route")\n  window.history.pushState(None ,None ,location)\n  \n  @bind(window,\'popstate\')\n  def popState(e):\n   Globals.__LOC__=window.location.pathname\n   Events.broadcast("change_route")\n   e.preventDefault()\n   \n def get_params(self):\n  path=f"{Globals.__LOC__}"\n  pathname=path.split(\'/\')\n  \n  query=pathname[-1]\n  pathurl=pathname[-2]\n  \n  return query,pathurl\n', ['browser', 'pyfyre.globals', 'pyfyre.globals.events', 'pyfyre.pyfyre'], 1], 'pyfyre.user': ['.py', '', [], 1], 'pyfyre.user.src': ['.py', 'from pyfyre.widgets import *\nfrom pyfyre.pyfyre import runApp\nfrom src.main import MyWebpage\n\n\n\n\n\nclass App(UsesState):\n def __init__(self):\n \n \n  self.greet="Welcome"\n  \n def build(self):\n \n \n \n \n  return MyWebpage(self.greet)\n  \n  \n  \n  \n  \n  \n  \n  \nrunApp(\nApp(),\nmount="app-mount"\n)\n', ['pyfyre.pyfyre', 'pyfyre.widgets', 'src.main'], 1], 'pyfyre.user.src.components': ['.py', '', [], 1], 'pyfyre.user.src.components.counterapp': ['.py', 'from pyfyre.widgets import *\n\nclass CounterApp(UsesState):\n def __init__(self):\n  self.count=0\n  \n def increment(self,e):\n  self.count=self.count+1\n  self.update()\n  \n def decrement(self,e):\n  self.count=self.count -1\n  self.update()\n  \n def build(self):\n  return Container(\n  className="counter-app",\n  children=[\n  Text("Counter app example:"),\n  Container(\n  className="counters",\n  children=[\n  Button(\n  "-",\n  onClick=self.decrement,\n  className="btn-counter"\n  ),\n  Text(self.count),\n  Button(\n  "+",\n  onClick=self.increment,\n  className="btn-counter"\n  )\n  ]\n  )\n  ]\n  )\n', ['pyfyre.widgets']], 'pyfyre.user.src.components.experiment': ['.py', 'from pyfyre.widgets import *\n\nclass Experiment(Container):\n def __init__(self):\n  super().__init__(\n  className="test",\n  children=[\n  Text(\n  "Try to experiment, edit the `src/main.py` and wait for it to reload automatically on a liveserver. Anyways, I\'m a component!",\n  className="desc"\n  )\n  ]\n  )\n', ['pyfyre.widgets']], 'pyfyre.user.src.css': ['.py', '', [], 1], 'pyfyre.user.src.main': ['.py', 'from src.components.counterapp import CounterApp\nfrom pyfyre.widgets import *\nfrom src.components.experiment import Experiment\n\n\n\nclass MyWebpage(UsesState):\n def __init__(self,greet):\n  self.greet=greet\n  \n def build(self):\n  return Container(\n  className="container",\n  children=[\n  Text(\n  f"{self.greet} to PyFyre!",\n  className="title"\n  ),\n  Experiment(),\n  CounterApp()\n  ]\n  )\n', ['pyfyre.widgets', 'src.components.counterapp', 'src.components.experiment']], 'pyfyre.widgets': ['.py', "from pyfyre.widgets.button import Button\nfrom pyfyre.widgets.container import Container\nfrom pyfyre.widgets.image import Image\nfrom pyfyre.widgets.link import Link\nfrom pyfyre.widgets.listbuilder import ListBuilder\nfrom pyfyre.widgets.states import UsesState\nfrom pyfyre.widgets.text import Text\n\n__all__=[\n'Button','Container','Image',\n'Link','ListBuilder','UsesState',\n'Text'\n]\n", ['pyfyre.widgets.button', 'pyfyre.widgets.container', 'pyfyre.widgets.image', 'pyfyre.widgets.link', 'pyfyre.widgets.listbuilder', 'pyfyre.widgets.states', 'pyfyre.widgets.text'], 1], 'pyfyre.widgets.button': ['.py', 'from pyfyre.widgets.widget import Widget\n\nclass Button(Widget):\n \'\'\n\n\n\n\n\n\n\n\n \n \n def __init__(self,textContent,onClick=lambda :print(""),className="",props:dict=None ):\n  super().__init__("button",className=className,props=props)\n  self.textContent=textContent\n  self.onClick=onClick\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  \n  element.bind("click",self.onClick)\n  \n  return element\n', ['pyfyre.widgets.widget']], 'pyfyre.widgets.clickable': ['.py', 'from pyfyre.widgets.widget import Widget\n\nclass Clickable(Widget):\n \'\'\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,bind,onClick,className="",props:dict=None ):\n  super().__init__("div",className=className,props=props)\n  self.bind=bind\n  self.onclick=onClick\n  \n def dom(self):\n  element=super().dom()\n  \n  element.appendChild(self.bind.dom())\n  \n  element.bind("click",self.onclick)\n  \n  return element\n', ['pyfyre.widgets.widget']], 'pyfyre.widgets.container': ['.py', 'from pyfyre.widgets.widget import Widget\n\nclass Container(Widget):\n \'\'\n\n\n\n\n\n\n\n \n \n def __init__(self,children=[],className="",props:dict=None ):\n  super().__init__("div",className=className,props=props)\n  self.children=children\n  \n def dom(self):\n  element=super().dom()\n  \n  for child in self.children:\n   element.appendChild(child.dom())\n   \n  return element\n', ['pyfyre.widgets.widget']], 'pyfyre.widgets.image': ['.py', 'from pyfyre.widgets.widget import Widget\n\nclass Image(Widget):\n \'\'\n\n\n\n\n\n \n \n def __init__(self,src,className="",props:dict=None ):\n  super().__init__("img",className=className,props=props)\n  self.src=src\n  \n def dom(self):\n  element=super().dom()\n  element.src=self.src\n  \n  return element\n', ['pyfyre.widgets.widget']], 'pyfyre.widgets.link': ['.py', 'from pyfyre.widgets.widget import Widget\n\nfrom pyfyre.router import Router\n\nclass Link(Widget):\n \'\'\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,textContent:str,to=\'/\',external=False ,className="",props:dict=None ):\n  super().__init__("a",className=className,props=props)\n  self.textContent=textContent\n  self.to=to\n  self.external=external\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  element.href="#"if not self.external else self.to\n  \n  if not self.external:\n   element.bind("click",self.navigate)\n   \n  return element\n  \n def navigate(self,e):\n  e.preventDefault()\n  Router.push(self.to)\n', ['pyfyre.router', 'pyfyre.widgets.widget']], 'pyfyre.widgets.listbuilder': ['.py', 'from pyfyre.widgets.widget import Widget\n\nclass ListBuilder(Widget):\n \'\'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,count=1,builder=None ,className="",props:dict=None ):\n  super().__init__("div",className=className,props=props)\n  self.count=count\n  self.builder=builder\n  \n def dom(self):\n  element=super().dom()\n  \n  for i in range(self.count):\n   element.appendChild(self.builder(i).dom())\n   \n  return element\n', ['pyfyre.widgets.widget']], 'pyfyre.widgets.states': ['.py', '\'\'\n\nfrom pyfyre.widgets.widget import Widget\nfrom pyfyre.core.exceptions import RenderError\n\nclass UsesState:\n \'\'\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self):\n  self.domElement=None\n  \n def build(self):\n  pass\n  \n def dom(self):\n  try :\n   self.domElement=self.build().dom()\n   return self.domElement\n  except Exception as e:\n   self.domElement=self.onerror(e).dom()\n   return self.domElement\n   \n def onerror(self,e):\n  \'\'\n\n\n\n\n\n\n\n\n\n  \n  \n  print("ERR!",e)\n  \n  return RenderError("Oh no! Something went wrong. We\'re working on fixing it.")\n  \n def update(self):\n  \'\'\n\n\n  \n  \n  parentNode=self.domElement.parentNode\n  self.domElement.remove()\n  self.domElement=self.dom()\n  parentNode.appendChild(self.domElement)\n', ['pyfyre.core.exceptions', 'pyfyre.widgets.widget']], 'pyfyre.widgets.text': ['.py', 'from pyfyre.widgets.widget import Widget\n\nclass Text(Widget):\n \'\'\n\n\n\n\n\n\n\n \n \n def __init__(self,textContent:str,className="",props:dict=None ):\n  super().__init__("p",className=className,props=props)\n  self.textContent=textContent\n  \n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  \n  return element\n', ['pyfyre.widgets.widget']], 'pyfyre.widgets.widget': ['.py', 'from browser import document\n\nclass Widget:\n\n def __init__(self,tagname:str,*,className,props:dict=None ):\n  self.tagname=tagname\n  self.className=className\n  self.element=None\n  self.props=props if props is not None else {}\n  \n def dom(self):\n  element=document.createElement(self.tagname)\n  element.className=self.className\n  \n  self.element=element\n  \n  for key,value in self.props.items():\n   element.attrs[key]=value\n   \n  return element\n', ['browser']], 'pyfyre.settings': ['.py', 'from pyfyre.globals import Globals\n\nAPP_NAME = "__dev__"\nDESCRIPTION = "PyFyre web application."\n\n# If debugging is true, it will produce errors on the console with better traceback.\nDEBUG = True', ['pyfyre.globals']]}
__BRYTHON__.update_VFS(scripts)